@page "/blazorJs"
@inject IJSRuntime JsRuntime

<h3>Blazor Js</h3>

<div>
	<button class="btn btn-secondary" @onclick="@(() => TestConfirmBox(_confirmMessage))">Test Confirm Button</button>
</div>
<div class="mt-2">
	<button class="btn btn-success" @onclick="TestSuccess">Test Toastr Success</button>
	<button class="btn btn-danger" @onclick="TestFailure">Test Toastr Failure</button>
</div>

<div class="mt-2">
	<button class="btn btn-success" @onclick="TestSwalSuccess">Test Swal Success</button>
	<button class="btn btn-danger" @onclick="TestSwalFailure">Test Swal Failure</button>
</div>

<div class="mt-1">
	@if (_confirmResult)
	{
		<p>Confirmation has been made!</p>
	}
	else
	{
		<p>Confirmation pending!</p>
	}
</div>

@code {

	private string _confirmMessage = "Are you sure you want to click";
	private bool _confirmResult;

	private async Task TestConfirmBox(string confirmMessage)
	{
		_confirmResult = await JsRuntime.InvokeAsync<bool>("confirm", confirmMessage);
	}

	private async Task TestSuccess()
	{
		await JsRuntime.ToastrSuccess("Success Message");
	}

	private async Task TestFailure()
	{
		await JsRuntime.ToastrFailure("Failure Message");
	}

	private async Task TestSwalSuccess()
	{
		await JsRuntime.SwalSuccess("Success Message Whoo Hoo!", "Success!");
	}

	private async Task TestSwalFailure()
	{
		await JsRuntime.SwalFailure("Failure Message Ups No!", "Error!");
	}

}